<template>
  <view class="container">
  <view class="head_title">
    {{headTitle}}
  </view>
  <view class="divider"></view>
   <view class="test_info">
    {{!testValue ? '尚未进行测量': ("测量结果 :" + (testValue + "cm"))}}
  </view>
  <view class="template">
    <view wx:if="{{connectState}}">请在{{timer}}内开始测试</view>
    <view class='template_info'>当前设备连接状态：
      <span class="danger_info" wx:if="{{!connectState}}">未连接测试设备</span>
      <span class="primary_info" wx:else>设备已连接</span>
    </view>
    <button class="test_btn" @tap="scanCode" wx:if="{{showScanButton && !backButton && !connectState}}">扫描设备二维码</button>
    <navigator url="../home/home" open-type="reLaunch">
      <button class="test_btn" wx:if='{{backButton}}'>回到首页</button>
    </navigator>
  </view>
  <view class="tips">
    Tips：请先扫描设备二维码，连接设备之后进行测试，测试完成自动提交结果
  </view>
  <button @tap="hello()">
    hello</button>
  </view>
</template>
<script>
import wepy from 'wepy'
var info = ''
import loading from '../state/loading'
// import result from '../utils/result'
import globalData from '../state/globalData'
// import parseUrl from '../utils/result'
export default class test extends wepy.component {
  props = {
    headTitle: String,
    projectName: String,
    testValue: {
      type: [Number, String],
      default: undefined,
      twoWay: true
    },
    deviceName: {
      type: String,
      default: undefined,
      twoWay: true
    },
    connectState: {
      type: Boolean,
      default: false,
      twoWay: true
    },
    backButton: {
      type: Boolean,
      default: false,
      twoWay: true
    },
    showScanButton: {
      type: Boolean,
      default: false,
      twoWay: true
    },
    timer: {
      type: String,
      default: undefined,
      twoWay: true
    }
  }
  watch = {
    timer(newV, old) {
      console.log(`timer form com new ${newV} old ${old}`)
    }
  }
  methods = {
    hello() {
      // this.methods.setVal('timer', '200')
      console.log('get timer', this.timer)
      console.log('get value', this.testValue)
      console.log('get connectState', this.connectState)
    },
    CHARACTERISTIC_CHANGE() {
      info = ''
      return new Promise((resolve, reject) => {
        wepy.onBLECharacteristicValueChange(this.methods.callback)
        resolve()
      })
    },
    scanCode() {
      this.deviceName = 'WHF170417040020'
      // wepy.scanCode().then(res => {
      //   let result = res.result
      //   // 21 待改
      //   let path = result.split('?')[0].substr(21, result.length)
      //   if (path !== this.projectName) {
      //     wepy.showModal({
      //       title: '设备扫描错误',
      //       content: '请扫描对应的测量仪器',
      //       showCancel: false
      //     })
      //   }
      //   let parm = parseUrl(result)
      //   if (parm.deviceName) {
      //     this.deviceName = parm.deviceName
      //   }
      // })
    },
    callback: res => {
      let buffer = res.value
      let str = String.fromCharCode(...new Uint8Array(buffer))
      if (str[0] === '{') {
        info = ''
      }
      info += str
      if (str[str.length - 1] === '}') {
        var temp = info
        info = ''
        console.log(temp)
        this.methods.viewModal(JSON.parse(temp))
      }
    },
    viewModal: info => {
      if (info.cmd === 3) {
        console.log('cmd3')
        this.timer = info.remain
        this.$apply()
      } else if (info.cmd === 1) {
        console.log('cmd1')
        this.connectState = true
        this.$apply()
        wepy.showModal({
          title: '连接成功',
          content: '请开始测试',
          showCancel: false
        })
        if (info.valdata) {
          this.methods.submit(info.valdata)
        }
      } else if (info.cmd === 5) {
        console.log('cmd5')
        this.methods.submit(info.valdata)
      } else {
      }
    },
    submit: data => {
      loading.showLoading('正在提交成绩...', true)
      // var obj = result()
      wepy
        .request({
          url: globalData.url,
          method: 'POST',
          data: { data: data }
        })
        .then(res => {
          loading.hideLoading()
          console.log(res.data)
          this.testValue = res.data.packets[0].value
          this.$apply()
          wepy
            .showModal({
              title: '测试结束',
              content: '成绩提交成功',
              showCancel: false
            })
        })
    }
  }
}
</script>
<style>
.container {
  width: 90%;
  margin-left: 5%;
  margin-right: 5%;
}
.head_title {
  font-size: 22px;
  text-align: center;
  margin-top: 30rpx;
}
.divider {
  height: 1px;
  width: 100%;
  background-color: #bdbdbd;
  position: absolute;
  right: 0;
  margin-top: 120rpx;
}
.tips {
  font-size: 13px;
  color: #d32f2f;
  margin-top: 40rpx;
  text-align: center;
}
.test_info {
  text-align: center;
  margin-top: 100rpx;
  font-size: 19px;
  /* margin-bottom:200rpx; */
}
.test_btn {
  margin-top: 20rpx;
  margin-bottom: 20rpx;
  width: 500rpx;
}
page {
  padding-bottom: 30rpx;
}
.template {
  margin-top: 100rpx;
}
.template_info {
  text-align: center;
  color: #999;
  font-size: 16px;
  margin-top: 30rpx;
  margin-bottom: 60rpx;
}
.danger_info {
  color: #d32f2f;
}
.primary_info {
  color: #4caf50;
}
.counter {
  text-align: center;
  font-size: 20px;
  margin-bottom: 30rpx;
  margin-top: 100rpx;
  font-family: Helvetica Neue, Helvetica;
  /* Helvetica Neue,Helvetica; */
}
.counter_info {
  color: #999;
}
</style>
